import os
import boto3
import json
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup as bs

def read_s3_file(bucket_name, file_key):
    s3 = boto3.client('s3')
    try:
        obj = s3.get_object(Bucket=bucket_name, Key=file_key)
        return obj['Body'].read().decode('utf-8')
    except s3.exceptions.NoSuchKey:
        raise ValueError(f"The file {file_key} does not exist in the bucket {bucket_name}.")

def scrape_and_upload_to_s3(bucket_name, file_key):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36"
    }
    url = "https://www.mmu.ac.kr/main/contents/todayMenu2"
    res = requests.get(url, headers=headers)
    res.raise_for_status()

    soup = bs(res.text, 'html.parser')
    rows = soup.find_all('tr')

    food_data = ""

    for row in rows:
        date_day_td = row.find('td', class_='text_center')
        if date_day_td:
            date_day = date_day_td.get_text(separator=' ', strip=True).split(' ')[0]
            menu_tds = row.find_all('td')[1:]
            meal_times = ['Ï°∞Ïãù', 'Ï§ëÏãù', 'ÏÑùÏãù']
            for index, menu_td in enumerate(menu_tds):
                menu = menu_td.get_text(separator='\n', strip=True)
                meal_time = meal_times[index] if index < len(meal_times) else f"ÏãùÏÇ¨ {index+1}"
                food_data += f"{date_day} {meal_time}\n{menu}\n---\n"

    s3 = boto3.client('s3')
    try:
        s3.put_object(Bucket=bucket_name, Key=file_key, Body=food_data, ContentType='text/plain; charset=utf-8')
        print("File uploaded successfully.")
    except Exception as e:
        print(f"Error uploading file: {str(e)}")

def get_korean_day_of_week(weekday):
    days = ['ÏõîÏöîÏùº', 'ÌôîÏöîÏùº', 'ÏàòÏöîÏùº', 'Î™©ÏöîÏùº', 'Í∏àÏöîÏùº', 'ÌÜ†ÏöîÏùº', 'ÏùºÏöîÏùº']
    return days[weekday]

def lambda_handler(event, context):
    # Log the event to CloudWatch
    print("Received event:", json.dumps(event, ensure_ascii=False))

    request_body = json.loads(event['body'])
    params = request_body['action']['params']
    
    if 'ÎÇ¥Ïùº' in params['time']:
        meal_type = params['time'].replace('ÎÇ¥Ïùº ', '')
        date_offset = 1
        show_all_today = 'Î©îÎâ¥' in meal_type
        menu_day_label = "ÎÇ¥ÏùºÏùò Ìï¥ÏÇ¨ÎåÄÌïô ÌïôÏãù Î©îÎâ¥"
    elif 'Ïò§Îäò Î©îÎâ¥' in params['time']:
        meal_type = 'Ïò§Îäò Î©îÎâ¥'
        date_offset = 0
        show_all_today = True
        menu_day_label = "Ïò§ÎäòÏùò Ìï¥ÏÇ¨ÎåÄÌïô ÌïôÏãù Î©îÎâ¥"
    else:
        meal_type = params['time']
        date_offset = 0
        show_all_today = False
        menu_day_label = "Ìï¥ÏÇ¨ÎåÄÌïô ÌïôÏãù Î©îÎâ¥"

    bucket_name = 'Private'
    file_key = 'Private'

    try:
        file_content = read_s3_file(bucket_name, file_key)
    except ValueError as e:
        return {
            'statusCode': 400,
            'body': json.dumps({'error': str(e)}),
            'headers': {
                'Access-Control-Allow-Origin': '*',
            }
        }

    lines = file_content.split('\n')
    current_date = datetime.now() + timedelta(hours=9)
    target_date = current_date + timedelta(days=date_offset)
    
    # ÎÇ†ÏßúÎ•º 'MMÏõî DDÏùº ÏöîÏùº' ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
    date_info = target_date.strftime(f'%mÏõî %dÏùº {get_korean_day_of_week(target_date.weekday())}')
    simple_date_info = target_date.strftime('%-m/%-d')

    menus = {"Ï°∞Ïãù": "", "Ï§ëÏãù": "", "ÏÑùÏãù": ""}
    menu_found = False
    current_meal_type = ""

    if show_all_today:
        for line in lines:
            if simple_date_info in line:
                for meal in menus.keys():
                    if meal in line:
                        current_meal_type = meal
                        menu_found = True
                        break
            elif menu_found and line.strip() == "---":
                current_meal_type = ""
            elif menu_found and current_meal_type:
                if simple_date_info in line or current_meal_type in line:
                    continue
                menus[current_meal_type] += line.strip() + "\n"

        menus = {meal: menu.strip() for meal, menu in menus.items() if menu.strip()}

    else:
        response_text = ""
        for line in lines:
            if simple_date_info in line and meal_type in line:
                menu_found = True
                response_text = f"{date_info} {meal_type}\n"
                continue
            if line.strip() == "---" and menu_found:
                break
            if menu_found:
                if simple_date_info in line or meal_type in line:
                    continue
                response_text += line.strip() + "\n"

    if not any(menus.values()):
        scrape_and_upload_to_s3(bucket_name, file_key)
        response_text = "Ìï¥ÎãπÌïòÎäî Î©îÎâ¥ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.\nÎ©îÎâ¥ ÏûêÎèô Í∞±Ïã† Ï§ëÏûÖÎãàÎã§.\n3Ï¥à Îí§ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.\nÎ∞©Ìïô Í∏∞Í∞ÑÏóî ÍµêÎÇ¥ ÏÇ¨Ïù¥Ìä∏Ïóê Î©îÎâ¥ Ï†ïÎ≥¥Í∞Ä ÏóÖÎ°úÎìú ÎêòÏßÄ ÏïäÏúºÎØÄÎ°ú Í∏∞Îã§Î†§ÎèÑ Î©îÎâ¥ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏñ¥Ïöî."

    # ÌòÑÏû¨ ÏãúÍ∞ÑÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞
    now = datetime.now() + timedelta(hours=9)

    # Î©îÎâ¥ ÌÉÄÏù¥ÌãÄÍ≥º ÏãúÍ∞Ñ Ï†ïÎ≥¥ ÏÉùÏÑ±
    menu_titles = "\n\n".join([
        f"üåÖÏ°∞Ïãù\n{menus.get('Ï°∞Ïãù', 'Î©îÎâ¥Í∞Ä ÏóÜÏäµÎãàÎã§.')}",
        f"üñºÔ∏èÏ§ëÏãù\n{menus.get('Ï§ëÏãù', 'Î©îÎâ¥Í∞Ä ÏóÜÏäµÎãàÎã§.')}",
        f"üåÜÏÑùÏãù\n{menus.get('ÏÑùÏãù', 'Î©îÎâ¥Í∞Ä ÏóÜÏäµÎãàÎã§.')}"
    ])

    # Ï£ºÎßêÏù∏ÏßÄ ÌôïÏù∏
    is_weekend = target_date.weekday() in [5, 6]  # Saturday (5) or Sunday (6)

    # ÏãúÍ∞ÑÎ≥ÑÎ°ú ÏïÑÏù¥ÏΩòÏùÑ Î≥ÄÍ≤Ω (Ïò§ÎäòÏùò Î©îÎâ¥Ïùº ÎïåÎßå Ï†ÅÏö©)
    if date_offset == 0:  # Ïò§ÎäòÏùò Î©îÎâ¥Ïùº Í≤ΩÏö∞Îßå Ï≤¥ÌÅ¨
        if now.time() >= datetime.strptime("07:30", "%H:%M").time() and now.time() <= datetime.strptime("08:30", "%H:%M").time():
            breakfast_icon = "‚úÖ"
        else:
            breakfast_icon = "‚è∞"

        if now.time() >= datetime.strptime("11:50", "%H:%M").time() and now.time() <= datetime.strptime("13:30", "%H:%M").time():
            lunch_icon = "‚úÖ"
        else:
            lunch_icon = "‚è∞"

        if now.time() >= datetime.strptime("17:30", "%H:%M").time() and now.time() <= datetime.strptime("18:30", "%H:%M").time():
            dinner_icon = "‚úÖ"
        else:
            dinner_icon = "‚è∞"
    else:  # ÎÇ¥ÏùºÏùò Î©îÎâ¥Ïùº Í≤ΩÏö∞
        breakfast_icon = "‚è∞"
        lunch_icon = "‚è∞"
        dinner_icon = "‚è∞"

    # Ï§ëÏãù ÏãúÍ∞Ñ Ï°∞Ï†ï
    lunch_time_description = "11:40 ~ 13:00" if is_weekend else "11:40 ~ 13:30"

    result = {
        "version": "2.0",
        "template": {
            "outputs": [
                {
                    "itemCard": {
                        "imageTitle": {
                            "title": date_info,
                            "description": menu_day_label
                        },
                        "title": menu_titles,
                        "itemList": [
                            {
                                "title": f"Ï°∞Ïãù {breakfast_icon}",
                                "description": "07:20 ~ 08:30"
                            },
                            {
                                "title": f"Ï§ëÏãù {lunch_icon}",
                                "description": lunch_time_description
                            },
                            {
                                "title": f"ÏÑùÏãù {dinner_icon}",
                                "description": "17:20 ~ 18:30"
                            }
                        ],
                        "itemListAlignment": "right",
                        "buttons": [
                            {
                              "action": "webLink",
                              "label": "Ï†ÑÏ≤¥ Î©îÎâ¥ Î≥¥Îü¨Í∞ÄÍ∏∞",
                              "webLinkUrl": "https://www.mmu.ac.kr/main/contents/todayMenu2"
                            }
                        ]
                    }
                }
            ],
            "quickReplies": [
                {
                    "messageText": "Ïù∏Í≤ÄÏ†ÑÎã¨ÏÇ¨Ìï≠",
                    "action": "message",
                    "label": "Ïù∏Í≤ÄÏ†ÑÎã¨ÏÇ¨Ìï≠"
                },
                {
                    "messageText": "Ìï¥ÏÑ±Í≥µÏßÄ",
                    "action": "message",
                    "label": "Ìï¥ÏÑ±Í≥µÏßÄ"
                },
                {
                    "messageText": "Ïù¥Î≤àÎã¨",
                    "action": "message",
                    "label": "Ïù¥Î≤àÎã¨ ÌïôÏÇ¨ÏùºÏ†ï"
                },
                {
                    "messageText": "ÌïôÏÇ¨Í≥µÏßÄ",
                    "action": "message",
                    "label": "ÌïôÏÇ¨Í≥µÏßÄ"
                }
            ]
        }
    }

    return {
        'statusCode': 200,
        'body': json.dumps(result, ensure_ascii=False),
        'headers': {
            'Access-Control-Allow-Origin': '*',
        }
    }
